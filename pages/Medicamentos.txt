import streamlit as st
import pandas as pd
from datetime import date
from fMedicamentos import get_medicamentos, marcar_medicamento_como_finalizado, insertar_medicamento  # funciones que deber√≠as tener
from fEncuesta import get_encuesta_completada
from functions import connect_to_supabase

conn = connect_to_supabase()

st.title("üíä Medicaci√≥n")

dni = st.session_state.get("dni")

if not dni:
    st.warning("No hay un DNI cargado en sesi√≥n.")
    st.stop()

encuesta_completada = get_encuesta_completada(dni, conn=conn)

if not encuesta_completada.empty and not encuesta_completada.iloc[0]["encuesta_realizada"]:
    st.warning("Antes de continuar, necesitamos que completes una breve encuesta sobre tu salud y h√°bitos.")
    if st.button("üìù Completar Encuesta"):
        st.switch_page("pages/_Encuesta.py")   # Ajust√° el path seg√∫n la estructura de tu app

    st.stop()



st.subheader("Medicamentos actuales")

med_actuales = get_medicamentos(dni=dni, solo_actuales=True, conn=conn)

if med_actuales.empty:
    st.info("No hay medicamentos actualmente registrados.")
else:
    # Mostrar tabla con bordes y opci√≥n para marcar como finalizado
    for i, row in med_actuales.iterrows():
        col1, col2 = st.columns([0.9, 0.1])
        with col1:
            st.markdown(
                f"""
                <div style='border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin-bottom: 10px;'>
                    <b>{row['nombre']}</b> ‚Äî {row['dosis']} ‚Äî {row['frecuencia']}<br>
                    Motivo: {row['motivo']}<br>
                    Desde: {row['inicio']}
                </div>
                """,
                unsafe_allow_html=True
            )
        with col2:
            if st.checkbox("‚úÖ", key=f"med_{row['id']}"):
                marcar_medicamento_como_finalizado(row['id'])  # esta funci√≥n debe poner fecha de finalizaci√≥n (hoy)
                st.rerun()

st.markdown("---")
st.subheader("‚ûï Agregar nuevo medicamento")

with st.form("nuevo_medicamento"):
    # Dentro de tu with st.form("nuevo_medicamento"):

    nombre = st.text_input("Marca del medicamento") 
    droga = st.text_input("Droga (ej: Ibuprofeno)")
    gramaje_mg = st.number_input("Gramaje (en mg)", min_value=0)

    st.write("---")
    st.markdown("**¬øC√≥mo se toma?**")

    col1, col2 = st.columns(2)
    with col1:
        dosis_cantidad = st.number_input("Cantidad", min_value=0.0, step=0.5, format="%.1f")
    with col2:
        dosis_unidad = st.selectbox("Unidad", ["comprimido(s)", "ml", "gota(s)", "aplicaci√≥n(es)"])

    frecuencia_tipo = st.selectbox("Frecuencia", ["Cada X horas", "Veces al d√≠a", "D√≠as espec√≠ficos de la semana"])

    frecuencia_valor = None
    if frecuencia_tipo == "Cada X horas":
        hora = st.number_input("¬øCada cu√°ntas horas?", min_value=1, max_value=24, step=1)
        frecuencia_valor = {'horas': hora} # Guardamos como JSON
    elif frecuencia_tipo == "Veces al d√≠a":
        horas = st.multiselect("¬øA qu√© horas?", [f"{h:02d}:00" for h in range(24)])
        frecuencia_valor = {'horas_dia': sorted(horas)} # Guardamos como JSON
    elif frecuencia_tipo == "D√≠as espec√≠ficos de la semana":
        dias = st.multiselect("¬øQu√© d√≠as?", ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"])
        frecuencia_valor = {'dias_semana': dias} # Guardamos como JSON

    st.write("---")
    motivo = st.text_input("Motivo (enfermedad cr√≥nica, aguda, etc.)")
    fecha_inicio = st.date_input("Fecha de inicio", date.today())
    fecha_fin = st.date_input("Fecha de finalizaci√≥n (opcional, si es de uso continuo)", value=None)

    enviar = st.form_submit_button("Guardar Medicamento")

    if enviar:
        insertar_medicamento(dni, droga, nombre, gramaje_mg, dosis, motivo, fecha_inicio, fecha_fin, conn=conn)
        st.success("Medicamento agregado correctamente.")
        st.rerun()

st.markdown("---")
st.subheader("üìú Historial de medicamentos")

med_historial = get_medicamentos(dni=dni, solo_actuales=False, solo_finalizados=True, conn=conn)

if med_historial.empty:
    st.info("A√∫n no hay medicamentos finalizados.")
else:
    st.dataframe(
        med_historial[["nombre", "dosis", "frecuencia", "motivo", "fecha_inicio", "fecha_fin"]],
        use_container_width=True,
        hide_index=True,
        column_config={
            "nombre": "Nombre",
            "dosis": "Dosis",
            "frecuencia": "Frecuencia",
            "motivo": "Motivo",
            "fecha_inicio": "Desde",
            "fecha_fin": "Hasta"
        }
    )

-----gemini------
import streamlit as st
import pandas as pd
from datetime import date
# CORREGIDO: Importar todas las funciones necesarias
from fMedicamentos import (
    get_medicamentos, 
    marcar_medicamento_como_finalizado, 
    insertar_medicamento, 
    formatear_dosis_texto, 
    registrar_toma
)
from fEncuesta import get_encuesta_completada
from functions import connect_to_supabase

if 'showing_form' not in st.session_state:
    st.session_state.showing_form = False
# --- Conexi√≥n y Setup Inicial ---
try:
    conn = connect_to_supabase()
    st.title("üíä Gesti√≥n de Medicaci√≥n")
except Exception as e:
    st.error(f"No se pudo conectar a la base de datos: {e}")
    st.stop()

dni = st.session_state.get("dni")
if not dni:
    st.warning("Por favor, inici√° sesi√≥n para ver tu medicaci√≥n.")
    st.stop()

# --- Verificaci√≥n de Encuesta ---
encuesta_completada = get_encuesta_completada(dni, conn=conn)
if not encuesta_completada.empty and not encuesta_completada.iloc[0]["encuesta_realizada"]:
    st.warning("Antes de continuar, necesitamos que completes una breve encuesta sobre tu salud y h√°bitos.")
    if st.button("üìù Completar Encuesta"):
        st.switch_page("pages/_Encuesta.py")
    st.stop()


# --- Mostrar Medicamentos Actuales ---
st.subheader("Tratamientos Actuales")
try:
    med_actuales = get_medicamentos(dni=dni, solo_actuales=True, conn=conn)
    if med_actuales.empty:
        st.info("No ten√©s tratamientos activos registrados.")
    else:
        # AGREGADO: Mostrar nombre del paciente al inicio
        if not med_actuales.empty:
            primer_medicamento = med_actuales.iloc[0]
            nombre_paciente = primer_medicamento['nombre_paciente']
            st.markdown(f"### üë§ Paciente: **{nombre_paciente}**")
            st.markdown("---")
        
        for i, row in med_actuales.iterrows():
            col1, col2 = st.columns([0.8, 0.2])
            with col1:
                dosis_formateada = formatear_dosis_texto(row)
                stock_texto = ""
                if row.get('stock_actual') is not None:
                    stock_texto = f"Stock restante: <b>{row['stock_actual']}</b>"
                    if row['stock_actual'] <= 10 and row['stock_actual'] > 0:
                        stock_texto += " ‚ö†Ô∏è ¬°Stock bajo!"
                    elif row['stock_actual'] == 0:
                        stock_texto = "<b>‚ö†Ô∏è ¬°Stock agotado!</b>"

                # Informaci√≥n sobre fecha de finalizaci√≥n
                fecha_fin_texto = ""
                if row.get('fecha_fin'):
                    fecha_fin_str = row['fecha_fin'].strftime('%d/%m/%Y') if hasattr(row['fecha_fin'], 'strftime') else str(row['fecha_fin'])
                    fecha_fin_texto = f"<br><small>üìÖ Finaliza el: {fecha_fin_str}</small>"

                st.markdown(f"""
                <div style='padding: 15px; border: 1px solid #ddd; border-radius: 10px; margin-bottom: 10px; background-color: #f9f9f9;'>
                    <h4 style='margin: 0; color: #2E86AB;'>{row['nombre']} ({row['droga']})</h4>
                    <p style='margin: 5px 0;'><b>Dosis:</b> {dosis_formateada}</p>
                    <p style='margin: 5px 0;'><b>Motivo:</b> {row.get('motivo', 'No especificado')}</p>
                    {stock_texto}
                    {fecha_fin_texto}
                </div>
                """, unsafe_allow_html=True)
                
                if row.get('stock_actual') is not None and row['stock_actual'] > 0:
                    if st.button(f"üíä Registrar toma", key=f"toma_{row['id_medicamento']}"):
                        registrar_toma(row['id_medicamento'], row['dosis_cantidad'], conn=conn)
                        st.rerun()
            with col2:
                if st.checkbox("Finalizar", key=f"check_{row['id_medicamento']}"):
                    if st.button("Confirmar", type="primary", key=f"confirm_{row['id_medicamento']}"):
                        marcar_medicamento_como_finalizado(row['id_medicamento'], conn=conn)
                        st.success(f"¬°Tratamiento finalizado!")
                        st.rerun()
except Exception as e:
    st.error(f"Error al cargar los medicamentos actuales: {e}")
# --- Agregar Nuevo Medicamento (SOLUCI√ìN DEFINITIVA SIN FORM) ---
st.markdown("---")
st.subheader("‚ûï Agregar Nuevo Tratamiento")

if not st.session_state.showing_form:
    if st.button("Agregar Nuevo Medicamento", type="primary"):
        st.session_state.showing_form = True
        st.rerun() # Forzamos un rerun para que el formulario aparezca inmediatamente

if st.session_state.showing_form:
    
    # PASO 1: IDENTIFICACI√ìN
    st.markdown("##### 1. ¬øQu√© medicamento es?")
    col1, col2 = st.columns(2)
    with col1:
        st.text_input("Marca comercial", help="Ej: Tafirol, Ibupirac", key="med_nombre") 
    with col2:
        st.text_input("Droga principal", help="Ej: Paracetamol, Ibuprofeno", key="med_droga")

    # PASO 2: TIPO Y CONCENTRACI√ìN
    st.markdown("##### 2. ¬øC√≥mo viene presentado?")
    st.selectbox(
        "Forma farmac√©utica",
        ["Comprimidos / C√°psulas", "L√≠quido (Jarabe / Gotas)", "Otro (Crema, Inyectable, etc.)"],
        key="med_tipo_medicamento"
    )

    if st.session_state.med_tipo_medicamento == "Comprimidos / C√°psulas":
        st.number_input("Gramaje por unidad (en mg)", min_value=0, help="Ej: 500", key="med_gramaje_mg")
    elif st.session_state.med_tipo_medicamento == "L√≠quido (Jarabe / Gotas)":
        st.text_input("Concentraci√≥n", help="Ej: '5mg/ml' o '10%'", key="med_concentracion")

    # PASO 3: DOSIS Y FRECUENCIA
    st.markdown("##### 3. ¬øC√≥mo y cu√°ndo se toma?")
    col1, col2 = st.columns(2)
    with col1:
        st.number_input("Cantidad por toma", min_value=0.0, step=0.5, format="%.1f", key="med_dosis_cantidad")
    with col2:
        if st.session_state.med_tipo_medicamento == "Comprimidos / C√°psulas":
            st.selectbox("Unidad", ["comprimido(s)", "c√°psula(s)"], key="med_dosis_unidad")
        elif st.session_state.med_tipo_medicamento == "L√≠quido (Jarabe / Gotas)":
            st.selectbox("Unidad", ["ml", "gota(s)", "cucharadita(s)"], key="med_dosis_unidad")
        else:
            st.text_input("Unidad", help="Ej: aplicaci√≥n, unidad, etc.", key="med_dosis_unidad")

    st.selectbox( "Patr√≥n de frecuencia", 
        ["Cada 'X' horas", "En horarios espec√≠ficos del d√≠a", "En d√≠as espec√≠ficos de la semana"],
        key="med_frecuencia_tipo"
    )

    # L√≥gica condicional que ahora s√≠ funcionar√°
    frecuencia_valor = {}
    if st.session_state.med_frecuencia_tipo == "Cada 'X' horas":
        st.number_input("Indicar cada cu√°ntas horas", min_value=1, max_value=48, step=1, key="med_freq_valor_horas")
        frecuencia_valor['intervalo_horas'] = st.session_state.med_freq_valor_horas
        
    elif st.session_state.med_frecuencia_tipo == "En horarios espec√≠ficos del d√≠a":
        st.multiselect("Seleccionar los horarios de toma", [f"{h:02d}:{m:02d}" for h in range(24) for m in (0, 30)], key="med_freq_valor_horarios")
        frecuencia_valor['horarios_dia'] = sorted(st.session_state.med_freq_valor_horarios)

    elif st.session_state.med_frecuencia_tipo == "En d√≠as espec√≠ficos de la semana":
        st.multiselect("1. Seleccionar los d√≠as de toma", ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"], key="med_freq_valor_dias")
        frecuencia_valor['dias_semana'] = st.session_state.med_freq_valor_dias
        st.multiselect("2. Seleccionar los horarios para esos d√≠as", [f"{h:02d}:{m:02d}" for h in range(24) for m in (0, 30)], key="med_freq_valor_horarios_sem")
        frecuencia_valor['horarios_en_dias'] = sorted(st.session_state.med_freq_valor_horarios_sem)

    # PASO 4: DETALLES ADICIONALES
    st.markdown("##### 4. Detalles adicionales")
    st.number_input("¬øCu√°ntas dosis vienen en la caja/envase? (0 si no aplica)", min_value=0, step=1, key="med_stock_inicial")
    st.text_input("Motivo del tratamiento", help="Ej: Gripe, Hipertensi√≥n, Anticonceptivo", key="med_motivo")
    st.date_input("Fecha de inicio del tratamiento", date.today(), key="med_fecha_inicio")
    st.date_input("Fecha de finalizaci√≥n (opcional)", value=None, key="med_fecha_fin")

    # BOT√ìN DE GUARDAR FUERA DEL FORM
    if st.button("Guardar Medicamento", type="primary"):
        # Recolectar todos los datos desde st.session_state
        try:
            # Validar que los campos obligatorios no est√©n vac√≠os
            if not st.session_state.med_nombre or not st.session_state.med_droga:
                st.error("El nombre y la droga del medicamento son obligatorios.")
            else:
                insertar_medicamento(
                    dni=dni, 
                    droga=st.session_state.med_droga, 
                    nombre=st.session_state.med_nombre, 
                    gramaje_mg=st.session_state.get("med_gramaje_mg"), 
                    concentracion=st.session_state.get("med_concentracion"),
                    motivo=st.session_state.med_motivo, 
                    fecha_inicio=st.session_state.med_fecha_inicio, 
                    fecha_fin=st.session_state.med_fecha_fin,
                    dosis_cantidad=st.session_state.med_dosis_cantidad, 
                    dosis_unidad=st.session_state.med_dosis_unidad, 
                    frecuencia_tipo=st.session_state.med_frecuencia_tipo, 
                    frecuencia_valor=frecuencia_valor,
                    stock_inicial=st.session_state.med_stock_inicial,
                    conn=conn
                )
                st.success("¬°Medicamento agregado correctamente!")

                # CORREGIDO: Limpiar los campos del formulario PERO mantener showing_form
                keys_to_delete = [k for k in st.session_state if k.startswith('med_')]
                for key in keys_to_delete:
                    del st.session_state[key]
                
                # Ocultar el formulario despu√©s del √©xito
                st.session_state.showing_form = False
                
                st.rerun()

        except Exception as e:
            st.error(f"No se pudo guardar el medicamento: {e}")
            # Agregar m√°s informaci√≥n de debug
            st.error(f"Detalles del error: {str(e)}")

    # AGREGADO: Bot√≥n para cancelar/ocultar el formulario
    if st.button("Cancelar"):
        st.session_state.showing_form = False
        # Limpiar los campos del formulario
        keys_to_delete = [k for k in st.session_state if k.startswith('med_')]
        for key in keys_to_delete:
            del st.session_state[key]
        st.rerun()

# --- Historial de Medicamentos ---
st.markdown("---")
st.subheader("üìú Historial de Tratamientos Finalizados")

try:
    med_historial = get_medicamentos(dni=dni, solo_actuales=False, solo_finalizados=True, conn=conn)

    if med_historial.empty:
        st.info("A√∫n no hay tratamientos finalizados en tu historial.")
    else:
        # AGREGADO: Mostrar nombre del paciente
        if not med_historial.empty:
            primer_medicamento = med_historial.iloc[0]
            nombre_paciente = primer_medicamento['nombre_paciente']
            st.markdown(f"### üë§ Paciente: **{nombre_paciente}**")
        
        # Creamos una columna legible para la dosis antes de mostrar el dataframe
        med_historial['dosis_legible'] = med_historial.apply(formatear_dosis_texto, axis=1)
        
        st.dataframe(
            med_historial[["nombre", "dosis_legible", "motivo", "fecha_inicio", "fecha_fin"]],
            use_container_width=True,
            hide_index=True,
            column_config={
                "nombre": "Medicamento",
                "dosis_legible": "Dosis y Frecuencia", 
                "motivo": "Motivo",
                "fecha_inicio": "Inicio",
                "fecha_fin": "Fin"
            }
        )
except Exception as e:
    st.error(f"Error al cargar el historial de medicamentos: {e}")