import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from functions import execute_query
from fEncuesta import obtener_edad
from fEncuesta import get_id_paciente_por_dni,tiene_antecedente_enfermedad_por_dni

def load_medical_profiles():
    """Cargar perfiles m√©dicos desde la base de datos"""
    try:
        query = "SELECT * FROM perfiles_medicos"
        df = execute_query(query, is_select=True)
        return df
    except Exception as e:
        st.error(f"Error cargando perfiles m√©dicos: {e}")
        return pd.DataFrame()

def load_user_medical_history(user_id):
    """Cargar historial m√©dico del usuario desde la base de datos"""
    try:
        query = "SELECT * FROM historial_medico WHERE id_paciente = %s"
        df = execute_query(query, params=(user_id,), is_select=True)
        if not df.empty:
            return df.iloc[0].to_dict()  # Convertir la primera fila a diccionario
        return None
    except Exception as e:
        st.error(f"Error cargando historial m√©dico: {e}")
        return None

def get_all_users():
    """Obtener lista de usuarios disponibles"""
    try:
        # Ajusta los nombres de campos seg√∫n tu tabla historial_medico
        query = "SELECT DISTINCT id_paciente FROM historial_medico WHERE id_paciente IS NOT NULL"
        df = execute_query(query, is_select=True)
        return df
    except Exception as e:
        st.error(f"Error cargando usuarios: {e}")
        return pd.DataFrame()

def map_user_profile_to_comparison(user_data):
    """
    Mapear datos del historial m√©dico del usuario al formato de comparaci√≥n
    
    IMPORTANTE: Ajusta los nombres de campos seg√∫n tu tabla historial_medico real
    Este es un mapeo de ejemplo - necesitas cambiarlo seg√∫n tus campos
    """
    
    # Ejemplo de mapeo - CAMBIA estos nombres por los de tu tabla real
    mapped_profile = {
        'edad': obtener_edad(user_data.get('id_paciente')),
        'genero': user_data.get('genero') or user_data.get('sexo'),
        
        # H√°bitos de vida - ajusta seg√∫n tus campos
        'actividad_fisica': user_data.get('actividad_fisica'),
        'fumador': user_data.get('fumador'),
        'alcohol_frecuente': user_data.get('consume_alcohol') or user_data.get('alcohol_frecuente') or user_data.get('bebe_alcohol'),
        
        # Antecedentes familiares - ajusta seg√∫n tus campos
        'antecedentes_familiares_cancer': tiene_antecedente_enfermedad_por_dni(dni, 'cancer', conn=conn),
        'antecedentes_familiares_diabetes': tiene_antecedente_enfermedad_por_dni(dni, 'diabetes', conn=conn),
        'antecedentes_familiares_hipertension': tiene_antecedente_enfermedad_por_dni(dni, 'hipertension', conn=conn),
        # M√©tricas f√≠sicas
        'imc': user_data.get('imc') or calculate_imc(user_data.get('peso'), user_data.get('altura')),
        
        # Condiciones actuales - ajusta seg√∫n tus campos
        'presion_arterial_alta': user_data.get('presion_alta') or user_data.get('presion_arterial_alta') or user_data.get('hipertension'),
        'colesterol_alto': user_data.get('colesterol_alto') or user_data.get('colesterol_elevado'),
        'estres_alto': user_data.get('nivel_estres') == 'Alto' if user_data.get('nivel_estres') else user_data.get('estres_alto')
    }
    
    return mapped_profile

def calculate_imc(peso, altura):
    """Calcular IMC si no est√° disponible directamente"""
    if peso and altura:
        # Convertir altura a metros si est√° en cm
        altura_m = altura / 100 if altura > 3 else altura
        return peso / (altura_m ** 2)
    return None

def calculate_similarity(user_profile, disease_profiles):
    """Calcular similitud entre perfil del usuario y perfiles de enfermedad"""
    similarities = []
    
    # Caracter√≠sticas a comparar
    characteristics = [
        'actividad_fisica', 'fumador', 'alcohol_frecuente',
        'antecedentes_familiares_cancer', 'antecedentes_familiares_diabetes',
        'antecedentes_familiares_hipertension',
        'colesterol_alto', 'estres_alto'
    ]
    
    for _, profile in disease_profiles.iterrows():
        matches = 0
        total_characteristics = 0
        
        # Comparar caracter√≠sticas booleanas
        for char in characteristics:
            if user_profile.get(char) is not None and profile[char] is not None:
                if user_profile.get(char) == profile[char]:
                    matches += 1
                total_characteristics += 1
        
        # Comparar edad (similar si est√° dentro de ¬±10 a√±os)
        if user_profile.get('edad') and profile['edad']:
            age_match = abs(user_profile.get('edad') - profile['edad']) <= 10
            if age_match:
                matches += 1
            total_characteristics += 1
        
        # Comparar IMC (similar si est√° dentro de ¬±3 puntos)
        if user_profile.get('imc') and profile['imc']:
            imc_match = abs(user_profile.get('imc') - profile['imc']) <= 3
            if imc_match:
                matches += 1
            total_characteristics += 1
        
        if total_characteristics > 0:
            similarity_percentage = (matches / total_characteristics) * 100
            similarities.append(similarity_percentage)
    
    return np.mean(similarities) if similarities else 0

def create_risk_gauge(percentage, disease_name):
    """Crear gr√°fico de gauge para mostrar porcentaje de riesgo"""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = percentage,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': f"Similitud con perfil de {disease_name}"},
        delta = {'reference': 50},
        gauge = {
            'axis': {'range': [None, 100]},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, 25], 'color': "lightgreen"},
                {'range': [25, 50], 'color': "yellow"},
                {'range': [50, 75], 'color': "orange"},
                {'range': [75, 100], 'color': "red"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 75
            }
        }
    ))
    
    fig.update_layout(height=300)
    return fig

def show_statistics_tab():
    """Mostrar la pesta√±a de estad√≠sticas"""
    st.header("üìä An√°lisis de Riesgo M√©dico")
    st.write("Compara tu perfil m√©dico con patrones de personas que padecen ciertas enfermedades")
    
    # Cargar datos
    df = load_medical_profiles()
    users_df = get_all_users()
    
    if df.empty:
        st.warning("No se pudieron cargar los datos m√©dicos de referencia")
        return
    
    if users_df.empty:
        st.warning("No se encontraron usuarios con historial m√©dico")
        return
    
    # Selector de usuario
    st.subheader("Seleccionar Usuario")
    
    # Crear opciones para el selectbox
    user_options = {}
    for _, user in users_df.iterrows():
        display_name = f"{user.get('nombre', 'Sin nombre')} (ID: {user['id_paciente']})"
        user_options[display_name] = user['id_paciente']
    
    selected_user_display = st.selectbox(
        "Selecciona el usuario para analizar:",
        options=list(user_options.keys()),
        help="Elige el usuario cuyo perfil m√©dico quieres analizar"
    )
    
    if selected_user_display:
        selected_user_id = user_options[selected_user_display]
        
        # Cargar historial m√©dico del usuario seleccionado
        user_medical_data = load_user_medical_history(selected_user_id)
        
        if not user_medical_data:
            st.error("No se pudo cargar el historial m√©dico del usuario seleccionado")
            return
        
        # Mostrar informaci√≥n del usuario
        with st.expander("üìã Ver Perfil del Usuario", expanded=False):
            col1, col2 = st.columns(2)
            with col1:
                st.write("**Informaci√≥n B√°sica:**")
                st.write(f"‚Ä¢ Nombre: {user_medical_data.get('nombre', 'N/A')}")
                st.write(f"‚Ä¢ Edad: {user_medical_data.get('edad', 'N/A')}")
                st.write(f"‚Ä¢ G√©nero: {user_medical_data.get('genero', 'N/A')}")
                st.write(f"‚Ä¢ IMC: {user_medical_data.get('imc', 'N/A')}")
            
            with col2:
                st.write("**H√°bitos y Condiciones:**")
                habits = []
                if user_medical_data.get('hace_ejercicio') or user_medical_data.get('actividad_fisica'):
                    habits.append("‚úÖ Hace ejercicio")
                else:
                    habits.append("‚ùå No hace ejercicio")
                
                if user_medical_data.get('fuma') or user_medical_data.get('fumador'):
                    habits.append("üö¨ Fumador")
                
                if user_medical_data.get('consume_alcohol') or user_medical_data.get('alcohol_frecuente'):
                    habits.append("üç∑ Consume alcohol")
                
                for habit in habits:
                    st.write(f"‚Ä¢ {habit}")
        
        # Bot√≥n para analizar
        if st.button("üîç Analizar Riesgo", type="primary", use_container_width=True):
            
            # Mapear perfil del usuario
            user_profile = map_user_profile_to_comparison(user_medical_data)
            
            # Verificar que tenemos datos suficientes
            non_null_values = sum(1 for v in user_profile.values() if v is not None)
            if non_null_values < 5:
                st.warning("‚ö†Ô∏è El perfil del usuario tiene informaci√≥n limitada. Los resultados pueden no ser precisos.")
            
            st.subheader("üìà Resultados del An√°lisis")
            
            # Obtener enfermedades √∫nicas
            diseases = df['enfermedad'].unique()
            diseases = [d for d in diseases if d != 'Saludable']  # Excluir perfiles saludables
            
            # Calcular similitudes para cada enfermedad
            results = []
            for disease in diseases:
                disease_profiles = df[df['enfermedad'] == disease]
                similarity = calculate_similarity(user_profile, disease_profiles)
                results.append({'enfermedad': disease, 'similitud': similarity})
            
            # Ordenar por similitud descendente
            results = sorted(results, key=lambda x: x['similitud'], reverse=True)
            
            # Mostrar resultados principales
            st.write("### üéØ Similitud con Perfiles de Enfermedades")
            
            # Mostrar top 3 enfermedades con mayor similitud
            cols = st.columns(min(3, len(results)))
            
            for i, result in enumerate(results[:3]):
                with cols[i]:
                    fig = create_risk_gauge(result['similitud'], result['enfermedad'])
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Interpretaci√≥n del resultado
                    if result['similitud'] >= 70:
                        st.error(f"‚ö†Ô∏è Alta similitud ({result['similitud']:.1f}%)")
                        st.write("Se recomienda consultar con un m√©dico")
                    elif result['similitud'] >= 50:
                        st.warning(f"‚ö° Similitud moderada ({result['similitud']:.1f}%)")
                        st.write("Mantener h√°bitos saludables y seguimiento")
                    else:
                        st.success(f"‚úÖ Baja similitud ({result['similitud']:.1f}%)")
                        st.write("Perfil de riesgo bajo")
            
            # Tabla detallada de resultados
            st.write("### üìä Detalle de Similitudes")
            results_df = pd.DataFrame(results)
            results_df['similitud'] = results_df['similitud'].round(1)
            results_df.columns = ['Enfermedad', 'Similitud (%)']
            
            # Aplicar colores seg√∫n el nivel de riesgo
            def color_similarity(val):
                if val >= 70:
                    return 'background-color: #ffebee'  # Rojo claro
                elif val >= 50:
                    return 'background-color: #fff3e0'  # Naranja claro
                else:
                    return 'background-color: #e8f5e8'  # Verde claro
            
            styled_df = results_df.style.applymap(color_similarity, subset=['Similitud (%)'])
            st.dataframe(styled_df, use_container_width=True, hide_index=True)
            
            # Gr√°fico de barras
            st.write("### üìà Comparaci√≥n Visual")
            fig_bar = px.bar(
                results_df,
                x='Similitud (%)',
                y='Enfermedad',
                orientation='h',
                color='Similitud (%)',
                color_continuous_scale='RdYlGn_r',
                title="Porcentaje de Similitud por Enfermedad",
                text='Similitud (%)'
            )
            fig_bar.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
            fig_bar.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig_bar, use_container_width=True)
            
            # Recomendaciones personalizadas
            st.write("### üí° Recomendaciones Personalizadas")
            
            recommendations = []
            if not user_profile.get('actividad_fisica'):
                recommendations.append("üèÉ‚Äç‚ôÇÔ∏è Incorporar actividad f√≠sica regular (150 min/semana)")
            if user_profile.get('fumador'):
                recommendations.append("üö≠ Considerar un programa para dejar de fumar")
            if user_profile.get('alcohol_frecuente'):
                recommendations.append("üç∑ Moderar el consumo de alcohol")
            if user_profile.get('imc') and user_profile.get('imc') > 30:
                recommendations.append("‚öñÔ∏è Trabajar en mantener un peso saludable")
            if user_profile.get('estres_alto'):
                recommendations.append("üßò‚Äç‚ôÄÔ∏è Practicar t√©cnicas de manejo del estr√©s")
            if user_profile.get('presion_arterial_alta'):
                recommendations.append("ü©∫ Seguimiento regular de la presi√≥n arterial")
            if user_profile.get('colesterol_alto'):
                recommendations.append("ü•ó Dieta baja en grasas saturadas y control del colesterol")
            
            if recommendations:
                st.write("**Para reducir riesgos potenciales, considera:**")
                for rec in recommendations:
                    st.write(f"‚Ä¢ {rec}")
            else:
                st.success("üéâ ¬°El perfil muestra h√°bitos de vida saludables! Contin√∫a manteniendo estos buenos h√°bitos.")
            
            # Mostrar an√°lisis de factores de riesgo m√°s relevantes
            highest_risk = results[0] if results else None
            if highest_risk and highest_risk['similitud'] > 50:
                st.write("### ‚ö†Ô∏è Factor de Mayor Atenci√≥n")
                st.info(f"""
                **{highest_risk['enfermedad']}** muestra la mayor similitud ({highest_risk['similitud']:.1f}%).
                
                Es importante recordar que esta similitud se basa en patrones estad√≠sticos y factores de riesgo comunes.
                No indica diagn√≥stico, sino √°reas donde se puede enfocar la prevenci√≥n.
                """)
            
            # Disclaimer
            st.write("### ‚öïÔ∏è Informaci√≥n Importante")
            st.info("""
            **Descargo de responsabilidad:** Este an√°lisis es √∫nicamente informativo y educativo. 
            No constituye un diagn√≥stico m√©dico ni reemplaza la consulta con profesionales de la salud.
            Los resultados se basan en patrones estad√≠sticos de factores de riesgo conocidos.
            
            **Recomendaci√≥n:** Consulta siempre con tu m√©dico para evaluaciones m√©dicas completas y personalizadas.
            """)
    
    else:
        st.info("üëÜ Selecciona un usuario para comenzar el an√°lisis")

# Funci√≥n principal para integrar en tu app
def main():
    st.set_page_config(
        page_title="MedCheck - Estad√≠sticas",
        page_icon="üìä",
        layout="wide"
    )
    
    show_statistics_tab()

if __name__ == "__main__":
    main()





def insert_historial(dni, fecha_completado, fumador, alcoholico, peso,
                     condicion=None, medicacion_cronica=None, dieta=False,
                     antecedentes_familiares_enfermedad=None, antecedentes_familiares_familiar=None,
                     conn=None):
    query = """
    INSERT INTO historial (
        dni, fecha_completado, fumador, alcoholico, peso, condicion,
        medicacion_cronica, dieta, estres_alto, colesterol_alto, antecedentes_familiares_enfermedad,
        antecedentes_familiares_familiar
    ) 
    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
    """
    params = (
        dni, fecha_completado, fumador, alcoholico, peso,
        condicion, medicacion_cronica, dieta,
        antecedentes_familiares_enfermedad, antecedentes_familiares_familiar)
    return execute_query(query, params=params, conn=conn, is_select=False)


-----gemini estadistica----
# -----------------------------------------------------------------------------
# C√ìDIGO COMPLETO Y UNIFICADO PARA LA PESTA√ëA DE ESTAD√çSTICAS (statistics_tab.py)
# -----------------------------------------------------------------------------
# Este archivo contiene toda la l√≥gica para:
# 1. Leer los datos del usuario que ha iniciado sesi√≥n (usando st.session_state).
# 2. Ofrecer un selector de perfiles si el usuario es cuidador de familiares.
# 3. Comparar el perfil seleccionado con datos de referencia de enfermedades.
# 4. Mostrar los resultados en gr√°ficos interactivos y tablas.
# -----------------------------------------------------------------------------

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from datetime import date

# --- IMPORTANTE ---
# Aseg√∫rate de que estas funciones de tus otros archivos est√©n disponibles y correctamente importadas.
from functions import execute_query, connect_to_supabase
from fEncuesta import get_id_paciente_por_dni, tiene_antecedente_enfermedad_por_dni, obtener_edad

# Se asume que tienes una funci√≥n similar para obtener la edad a partir del ID.





# Si no, tendr√°s que ajustar esta parte.
def obtener_edad_por_dni():
    """
    Obtiene la edad de un paciente a partir de su ID.
    Esta es una funci√≥n de ejemplo, ad√°ptala a tu implementaci√≥n real.
    """
    dni = st.session_state.get("dni")
    try:
        query = "SELECT fecha_nacimiento FROM pacientes WHERE dni = %s"
        df = execute_query(query, params=(dni,), is_select=True)
        if not df.empty:
            fecha_nacimiento = df.iloc[0]['fecha_nacimiento']
            if isinstance(fecha_nacimiento, date):
                hoy = date.today()
                return hoy.year - fecha_nacimiento.year - ((hoy.month, hoy.day) < (fecha_nacimiento.month, fecha_nacimiento.day))
    except Exception as e:
        st.error(f"No se pudo calcular la edad: {e}")
    return None

# -----------------------------------------------------------------------------
# SECCI√ìN 1: FUNCIONES DE CARGA Y PROCESAMIENTO DE DATOS
# -----------------------------------------------------------------------------

def load_medical_profiles():
    """Cargar perfiles m√©dicos de referencia desde la base de datos."""
    try:
        query = "SELECT * FROM perfiles_medicos"
        df = execute_query(query, is_select=True)
        return df
    except Exception as e:
        st.error(f"Error cargando perfiles m√©dicos de referencia: {e}")
        return pd.DataFrame()

def load_user_medical_data(id_paciente):
    """
    Carga el historial y los datos del paciente en una sola consulta
    uniendo las tablas 'pacientes' e 'historial_medico'.
    """
    try:
        query = """
        SELECT 
            p.*, 
            hm.*
        FROM pacientes p
        LEFT JOIN historial_medico hm ON p.id_paciente = hm.id_paciente
        WHERE p.id_paciente = %s
        ORDER BY hm.fecha_completado DESC
        LIMIT 1;
        """
        df = execute_query(query, params=(id_paciente,), is_select=True)
        if not df.empty:
            return df.iloc[0].to_dict()
        return None
    except Exception as e:
        st.error(f"Error cargando el historial m√©dico del usuario: {e}")
        return None

def calculate_imc(peso, altura):
    """
    Calcula el IMC.
    ADVERTENCIA: La columna 'altura' no existe en tu esquema de BD actual.
    Para que esto funcione, debes a√±adir una columna 'altura' a tu tabla 'pacientes'.
    """
    if peso and altura and altura > 0:
        altura_m = altura / 100 if altura > 3 else altura
        if altura_m > 0:
            return peso / (altura_m ** 2)
    return None

def map_user_profile_to_comparison(user_data):
    """
    Mapear datos del historial m√©dico del usuario al formato de comparaci√≥n
    
    IMPORTANTE: Ajusta los nombres de campos seg√∫n tu tabla historial_medico real
    Este es un mapeo de ejemplo - necesitas cambiarlo seg√∫n tus campos
    """
    dni = st.session_state.get("dni")
    conn = connect_to_supabase
    # Ejemplo de mapeo - CAMBIA estos nombres por los de tu tabla real
    mapped_profile = {
        'edad': obtener_edad_por_dni(),
        
        # H√°bitos de vida - ajusta seg√∫n tus campos
        'actividad_fisica': user_data.get('actividad_fisica'),
        'fumador': user_data.get('fumador'),
        'alcohol_frecuente': user_data.get('consume_alcohol') or user_data.get('alcohol_frecuente') or user_data.get('bebe_alcohol'),
        
        # Antecedentes familiares - ajusta seg√∫n tus campos
        'antecedentes_familiares_cancer': tiene_antecedente_enfermedad_por_dni(dni, 'cancer', conn=conn),
        'antecedentes_familiares_diabetes': tiene_antecedente_enfermedad_por_dni(dni, 'diabetes', conn=conn),
        'antecedentes_familiares_hipertension': tiene_antecedente_enfermedad_por_dni(dni, 'hipertension', conn=conn),
        # M√©tricas f√≠sicas
        #'imc': user_data.get('imc') or calculate_imc(user_data.get('peso'), user_data.get('altura')),
        
        # Condiciones actuales - ajusta seg√∫n tus campos
        'presion_arterial_alta': user_data.get('presion_alta') or user_data.get('presion_arterial_alta') or user_data.get('hipertension'),
        'colesterol_alto': user_data.get('colesterol_alto') or user_data.get('colesterol_elevado'),
        'estres_alto': user_data.get('nivel_estres') == 'Alto' if user_data.get('nivel_estres') else user_data.get('estres_alto')
    }
    
    return mapped_profile

def calculate_similarity(user_profile, disease_profiles):
    """Calcula la similitud entre el perfil del usuario y un grupo de perfiles de enfermedad."""
    similarities = []
    characteristics = [
        'actividad_fisica', 'fumador', 'alcohol_frecuente',
        'antecedentes_familiares_cancer', 'antecedentes_familiares_diabetes',
        'antecedentes_familiares_hipertension',
        'colesterol_alto', 'estres_alto', 'presion_arterial_alta'
    ]
    
    for _, profile in disease_profiles.iterrows():
        matches = 0
        total_characteristics = 0
        
        for char in characteristics:
            if user_profile.get(char) is not None:
                total_characteristics += 1
                if user_profile.get(char) == profile[char]:
                    matches += 1
        
        if user_profile.get('edad') and not pd.isna(profile['edad']):
            total_characteristics += 1
            if abs(user_profile['edad'] - profile['edad']) <= 10:
                matches += 1
        
        #if user_profile.get('imc') and not pd.isna(profile['imc']):
            #total_characteristics += 1
            #if abs(user_profile['imc'] - profile['imc']) <= 3:
                #matches += 1
        
        if total_characteristics > 0:
            similarity_percentage = (matches / total_characteristics) * 100
            similarities.append(similarity_percentage)
    
    return np.mean(similarities) if similarities else 0

# -----------------------------------------------------------------------------
# SECCI√ìN 2: FUNCIONES DE VISUALIZACI√ìN
# -----------------------------------------------------------------------------

def create_risk_gauge(percentage, disease_name):
    """Crea un gr√°fico de medidor (gauge) para mostrar un porcentaje de similitud."""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number",
        value = percentage,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': f"Similitud con {disease_name}", 'font': {'size': 16}},
        gauge = {
            'axis': {'range': [None, 100], 'tickwidth': 1, 'tickcolor': "darkblue"},
            'bar': {'color': "#2E3B4E"},
            'steps': [
                {'range': [0, 40], 'color': "lightgreen"},
                {'range': [40, 70], 'color': "yellow"},
                {'range': [70, 100], 'color': "red"}
            ],
        }
    ))
    fig.update_layout(height=250, margin=dict(l=20, r=20, t=50, b=20))
    return fig

# -----------------------------------------------------------------------------
# SECCI√ìN 3: FUNCI√ìN PRINCIPAL DE LA P√ÅGINA DE STREAMLIT
# -----------------------------------------------------------------------------

def show_statistics_tab():
    """
    Muestra la pesta√±a de estad√≠sticas completa. Funciona para el usuario logueado
    y permite cambiar a perfiles familiares si es un cuidador.
    """
    conn = connect_to_supabase() 

    # 1. Verificar que el usuario haya iniciado sesi√≥n
    if 'logged_in' not in st.session_state or not st.session_state['logged_in']:
        st.warning("üîí Por favor, inicia sesi√≥n para ver tu an√°lisis de riesgo personalizado.")
        st.info("Puedes iniciar sesi√≥n desde la p√°gina principal.")
        return

    # 2. Obtener el DNI y verificar que exista en la sesi√≥n
    dni = st.session_state.get("dni")
    if not dni:
        st.error("üö® No se pudo obtener la informaci√≥n del usuario. Por favor, intenta iniciar sesi√≥n de nuevo.")
        return

    # 3. Consultar la base de datos de forma segura
    try:
        query = "SELECT nombre FROM pacientes WHERE dni = %s"
        # Usamos [dni] para pasar los par√°metros como una lista
        paciente_info = execute_query(query, [dni], conn=conn, is_select=True)
        
        # Valor por defecto en caso de no encontrar al paciente
        nombre_paciente_actual = "Usuario" 

        if not paciente_info.empty:
            # Si se encuentra, se actualiza el nombre
            nombre_paciente_actual = paciente_info.iloc[0]['nombre']
        else:
            # Manejamos el caso en que el DNI no est√° en la tabla de pacientes
            st.warning(f"No se encontr√≥ un perfil de paciente para el DNI {dni}.")
            return
    except Exception as e:
        st.error(f"Ocurri√≥ un error al cargar tus datos: {e}")
        return

    st.header(f"üìä An√°lisis de Riesgo para {nombre_paciente_actual}")
    st.write("Compara tu perfil m√©dico con perfiles de referencia para identificar posibles factores de riesgo.")

    df_ref = load_medical_profiles()
    if df_ref.empty:
        st.error("No se pudieron cargar los datos de referencia. Intenta m√°s tarde.")
        return
        

    if st.button("üîç Analizar Riesgo", type="primary", use_container_width=True):
        id_paciente = get_id_paciente_por_dni(dni)
        user_medical_data = load_user_medical_data(id_paciente)
        user_profile = map_user_profile_to_comparison(user_medical_data)
        
        with st.expander("Ver perfil de usuario mapeado (para depuraci√≥n)"):
            st.json(user_profile)

        non_null_values = sum(1 for v in user_profile.values() if v is not None and v != '')
        if non_null_values < 5:
            st.warning("‚ö†Ô∏è El perfil del usuario tiene informaci√≥n limitada. Los resultados pueden no ser precisos.")
        
        st.subheader("üìà Resultados del An√°lisis")
        diseases = df_ref['enfermedad'].unique()
        diseases = [d for d in diseases if d != 'Saludable']
        
        results = []
        for disease in diseases:
            disease_profiles = df_ref[df_ref['enfermedad'] == disease]
            similarity = calculate_similarity(user_profile, disease_profiles)
            results.append({'enfermedad': disease, 'similitud': similarity})
        
        if not results:
            st.info("No se pudo calcular la similitud para ninguna enfermedad.")
            return

        results = sorted(results, key=lambda x: x['similitud'], reverse=True)
        
        cols = st.columns(min(3, len(results)))
        for i, result in enumerate(results[:3]):
            with cols[i]:
                fig = create_risk_gauge(result['similitud'], result['enfermedad'])
                st.plotly_chart(fig, use_container_width=True)
                sim_value = result['similitud']
                if sim_value >= 70:
                    st.error(f"**Alta Similitud ({sim_value:.0f}%)**")
                elif sim_value >= 40:
                    st.warning(f"**Similitud Moderada ({sim_value:.0f}%)**")
                else:
                    st.success(f"**Baja Similitud ({sim_value:.0f}%)**")

        st.info("""
        **Descargo de responsabilidad:** Este an√°lisis es una herramienta educativa basada en similitudes estad√≠sticas, no un diagn√≥stico. 
        Consulta siempre a un profesional de la salud para cualquier decisi√≥n m√©dica.
        """)


def main():
    st.set_page_config(
        page_title="MedCheck - Estad√≠sticas",
        page_icon="üìä",
        layout="wide"
    )
    
    show_statistics_tab()

if __name__ == "__main__":
    main()
